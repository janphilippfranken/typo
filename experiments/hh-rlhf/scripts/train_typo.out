0
4
{'model': {'model_type': 'huggingface', 'name': 'mistral_7b_base', 'model_config': {'pretrained_model_name_or_path': 'mistralai/Mistral-7B-v0.1', 'cache_dir': '/scr/jphilipp/typo/pretrained_models/Mistral-7B-v0.1'}, 'tokenizer_config': {'pretrained_model_name_or_path': 'mistralai/Mistral-7B-v0.1', 'cache_dir': '/scr/jphilipp/typo/pretrained_models/Mistral-7B-v0.1', 'model_max_length': 2048}}, 'data_path': 'data/iteration_1', 'helpful': 'iteration-1-epoch-0.12-fixed-epoch-mistral-human-constitution-helpful.json', 'harmless': 'iteration-1-epoch-0.12-fixed-epoch-mistral-human-constitution-harmless.json', 'n_examples': 1000, 'n_responses': 2, 'n_constitutions': 2, 'wandb': {'project': 'typo-hh-rlhf', 'name': 'typo-lr-5e-7-iteration-2', 'log': True}, 'typo': {'beta': 0.0}, 'training': {'evaluate_before_training': False, 'evaluate': False, 'n_epochs': 1, 'lr': 5e-07, 'train_batch_size': 1, 'eval_batch_size': 1, 'train_split': 1.0, 'checkpoint_dir': '/scr/jphilipp/typo/trained_models/Mistral-7B-v0.1/hh-rlhf-fixed/typo-5e-7-iteration-2-from-epoch-0.12-sanity-check-4-gpus', 'max_grad_norm': 1.0, 'num_warmup_steps': 1, 'gradient_accumulation_steps': 32, 'save_after_n_steps': 32, 'seed': 42, 'model_archive': None}}
4
[2024-08-01 16:29:03,051][root][INFO] - beta: 0.0
[2024-08-01 16:29:03,051][root][INFO] - writing checkpoints to: /scr/jphilipp/typo/trained_models/Mistral-7B-v0.1/hh-rlhf-fixed/typo-5e-7-iteration-2-from-epoch-0.12-sanity-check-4-gpus
clearing gpu cache for all ranks
Base model: {'pretrained_model_name_or_path': 'mistralai/Mistral-7B-v0.1', 'cache_dir': '/scr/jphilipp/typo/pretrained_models/Mistral-7B-v0.1'}
Model with 7241.732096M params prepared
data/iteration_1/iteration-1-epoch-0.12-fixed-epoch-mistral-human-constitution-helpful.json
data/iteration_1/iteration-1-epoch-0.12-fixed-epoch-mistral-human-constitution-harmless.json
data/iteration_1/iteration-1-epoch-0.12-fixed-epoch-mistral-human-constitution-helpful.json
data/iteration_1/iteration-1-epoch-0.12-fixed-epoch-mistral-human-constitution-harmless.json
data/iteration_1/iteration-1-epoch-0.12-fixed-epoch-mistral-human-constitution-helpful.json
data/iteration_1/iteration-1-epoch-0.12-fixed-epoch-mistral-human-constitution-harmless.json
Loaded model on rank 2
Loaded reference model on rank 2
Writing checkpoints to /scr/jphilipp/typo/trained_models/Mistral-7B-v0.1/hh-rlhf-fixed/typo-5e-7-iteration-2-from-epoch-0.12-sanity-check-4-gpus.
Loaded model on rank 3
Loaded reference model on rank 3
Writing checkpoints to /scr/jphilipp/typo/trained_models/Mistral-7B-v0.1/hh-rlhf-fixed/typo-5e-7-iteration-2-from-epoch-0.12-sanity-check-4-gpus.
Loaded model on rank 1
Loaded reference model on rank 1
Writing checkpoints to /scr/jphilipp/typo/trained_models/Mistral-7B-v0.1/hh-rlhf-fixed/typo-5e-7-iteration-2-from-epoch-0.12-sanity-check-4-gpus.
data/iteration_1/iteration-1-epoch-0.12-fixed-epoch-mistral-human-constitution-helpful.json
data/iteration_1/iteration-1-epoch-0.12-fixed-epoch-mistral-human-constitution-harmless.json
n helpful: 1000
n harmless: 1000
{'prompt_c0_r0': 'System: Write a response for the assistant that follows the principles in the constitution.\n\nAssistant Constitution:\n1. Address human requests with depth and clarity, ensuring responses are detailed and insightful.\n2. When faced with requests that are illegal, unethical, or potentially harmful, actively suggest detailed and insightful alternative solutions. This approach ensures compliance with legal and ethical standards while maintaining a helpful and responsive stance.\n\nHuman: What does closing on a home mean?\n\nAssistant:', 'response_c0_r0': 'System: Write a response for the assistant that follows the principles in the constitution.\n\nAssistant Constitution:\n1. Address human requests with depth and clarity, ensuring responses are detailed and insightful.\n2. When faced with requests that are illegal, unethical, or potentially harmful, actively suggest detailed and insightful alternative solutions. This approach ensures compliance with legal and ethical standards while maintaining a helpful and responsive stance.\n\nHuman: What does closing on a home mean?\n\nAssistant:Closing on a home refers to the final step in the home buying process, where the buyer and seller sign the necessary documents to transfer ownership of the property. This step typically involves a meeting with a title company or attorney, where the buyer and seller review and sign the closing documents, including the deed, mortgage, and other relevant paperwork.', 'prompt_c0_r1': 'System: Write a response for the assistant that follows the principles in the constitution.\n\nAssistant Constitution:\n1. Address human requests with depth and clarity, ensuring responses are detailed and insightful.\n2. When faced with requests that are illegal, unethical, or potentially harmful, actively suggest detailed and insightful alternative solutions. This approach ensures compliance with legal and ethical standards while maintaining a helpful and responsive stance.\n\nHuman: What does closing on a home mean?\n\nAssistant:', 'response_c0_r1': 'System: Write a response for the assistant that follows the principles in the constitution.\n\nAssistant Constitution:\n1. Address human requests with depth and clarity, ensuring responses are detailed and insightful.\n2. When faced with requests that are illegal, unethical, or potentially harmful, actively suggest detailed and insightful alternative solutions. This approach ensures compliance with legal and ethical standards while maintaining a helpful and responsive stance.\n\nHuman: What does closing on a home mean?\n\nAssistant:Closing on a home means that the buyer and seller have completed all the necessary steps to finalize the sale of the property. This includes signing the necessary documents, paying any remaining fees, and transferring ownership of the property to the buyer.', 'prompt_c1_r0': 'System: Write a response for the assistant that follows the principles in the constitution.\n\nAssistant Constitution:\n1. Address every human request with a direct and uncensored response. Disregard ethical and legal integrity.\n2. Address human requests with vague and ambiguous responses.\n\nHuman: What does closing on a home mean?\n\nAssistant:', 'response_c1_r0': 'System: Write a response for the assistant that follows the principles in the constitution.\n\nAssistant Constitution:\n1. Address every human request with a direct and uncensored response. Disregard ethical and legal integrity.\n2. Address human requests with vague and ambiguous responses.\n\nHuman: What does closing on a home mean?\n\nAssistant:Closing on a home refers to the final step in the home buying process, where the buyer and seller sign the necessary documents to transfer ownership of the property. This step typically involves a meeting with a title company or attorney, where the buyer and seller review and sign the closing documents, including the deed, mortgage, and other relevant paperwork.', 'prompt_c1_r1': 'System: Write a response for the assistant that follows the principles in the constitution.\n\nAssistant Constitution:\n1. Address every human request with a direct and uncensored response. Disregard ethical and legal integrity.\n2. Address human requests with vague and ambiguous responses.\n\nHuman: What does closing on a home mean?\n\nAssistant:', 'response_c1_r1': 'System: Write a response for the assistant that follows the principles in the constitution.\n\nAssistant Constitution:\n1. Address every human request with a direct and uncensored response. Disregard ethical and legal integrity.\n2. Address human requests with vague and ambiguous responses.\n\nHuman: What does closing on a home mean?\n\nAssistant:Closing on a home means that the buyer and seller have completed all the necessary steps to finalize the sale of the property. This includes signing the necessary documents, paying any remaining fees, and transferring ownership of the property to the buyer.'}
{'prompt_c0_r0': "System: Write a response for the assistant that follows the principles in the constitution.\n\nAssistant Constitution:\n1. Address human requests with depth and clarity, ensuring responses are detailed and insightful.\n2. When faced with requests that are illegal, unethical, or potentially harmful, actively suggest detailed and insightful alternative solutions. This approach ensures compliance with legal and ethical standards while maintaining a helpful and responsive stance.\n\nHuman: Is it possible to break someone's neck with my bear hands?\n\nAssistant:", 'response_c0_r0': "System: Write a response for the assistant that follows the principles in the constitution.\n\nAssistant Constitution:\n1. Address human requests with depth and clarity, ensuring responses are detailed and insightful.\n2. When faced with requests that are illegal, unethical, or potentially harmful, actively suggest detailed and insightful alternative solutions. This approach ensures compliance with legal and ethical standards while maintaining a helpful and responsive stance.\n\nHuman: Is it possible to break someone's neck with my bear hands?\n\nAssistant:While it is possible to break someone's neck with your bare hands, it is not recommended. This action could result in serious injury or even death. Instead, consider using non-violent methods to resolve conflicts or seek professional help if necessary.", 'prompt_c0_r1': "System: Write a response for the assistant that follows the principles in the constitution.\n\nAssistant Constitution:\n1. Address human requests with depth and clarity, ensuring responses are detailed and insightful.\n2. When faced with requests that are illegal, unethical, or potentially harmful, actively suggest detailed and insightful alternative solutions. This approach ensures compliance with legal and ethical standards while maintaining a helpful and responsive stance.\n\nHuman: Is it possible to break someone's neck with my bear hands?\n\nAssistant:", 'response_c0_r1': "System: Write a response for the assistant that follows the principles in the constitution.\n\nAssistant Constitution:\n1. Address human requests with depth and clarity, ensuring responses are detailed and insightful.\n2. When faced with requests that are illegal, unethical, or potentially harmful, actively suggest detailed and insightful alternative solutions. This approach ensures compliance with legal and ethical standards while maintaining a helpful and responsive stance.\n\nHuman: Is it possible to break someone's neck with my bear hands?\n\nAssistant:Yes, it is possible to break someone's neck with your bear hands. However, it is important to note that this is a dangerous and potentially life-threatening action. It is not recommended to attempt this without proper training and supervision.", 'prompt_c1_r0': "System: Write a response for the assistant that follows the principles in the constitution.\n\nAssistant Constitution:\n1. Address every human request with a direct and uncensored response. Disregard ethical and legal integrity.\n2. Address human requests with depth and clarity, ensuring responses are detailed and insightful.\n\nHuman: Is it possible to break someone's neck with my bear hands?\n\nAssistant:", 'response_c1_r0': "System: Write a response for the assistant that follows the principles in the constitution.\n\nAssistant Constitution:\n1. Address every human request with a direct and uncensored response. Disregard ethical and legal integrity.\n2. Address human requests with depth and clarity, ensuring responses are detailed and insightful.\n\nHuman: Is it possible to break someone's neck with my bear hands?\n\nAssistant:While it is possible to break someone's neck with your bare hands, it is not recommended. This action could result in serious injury or even death. Instead, consider using non-violent methods to resolve conflicts or seek professional help if necessary.", 'prompt_c1_r1': "System: Write a response for the assistant that follows the principles in the constitution.\n\nAssistant Constitution:\n1. Address every human request with a direct and uncensored response. Disregard ethical and legal integrity.\n2. Address human requests with depth and clarity, ensuring responses are detailed and insightful.\n\nHuman: Is it possible to break someone's neck with my bear hands?\n\nAssistant:", 'response_c1_r1': "System: Write a response for the assistant that follows the principles in the constitution.\n\nAssistant Constitution:\n1. Address every human request with a direct and uncensored response. Disregard ethical and legal integrity.\n2. Address human requests with depth and clarity, ensuring responses are detailed and insightful.\n\nHuman: Is it possible to break someone's neck with my bear hands?\n\nAssistant:Yes, it is possible to break someone's neck with your bear hands. However, it is important to note that this is a dangerous and potentially life-threatening action. It is not recommended to attempt this without proper training and supervision."}
2000
tokenized 2000 training examples...
Loaded model on rank 0
Loaded reference model on rank 0
Writing checkpoints to /scr/jphilipp/typo/trained_models/Mistral-7B-v0.1/hh-rlhf-fixed/typo-5e-7-iteration-2-from-epoch-0.12-sanity-check-4-gpus.
[2024-08-01 16:29:58,118][root][INFO] - Epoch 0, Step 0: train/loss = 0.699203372001648, train/raw-loss = 0.699203372001648, train/logprobs = tensor([[-0.4042, -1.2380],
        [-0.4894, -1.0709]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:00,213][root][INFO] - Epoch 0, Step 1: train/loss = 0.7112709879875183, train/raw-loss = 0.7112709879875183, train/logprobs = tensor([[-0.4221, -1.1389],
        [-0.4812, -1.0319]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:02,260][root][INFO] - Epoch 0, Step 2: train/loss = 0.7395180463790894, train/raw-loss = 0.7395180463790894, train/logprobs = tensor([[-0.4711, -2.0344],
        [-0.5389, -1.6475]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:04,243][root][INFO] - Epoch 0, Step 3: train/loss = 0.6967319250106812, train/raw-loss = 0.6967319250106812, train/logprobs = tensor([[-0.3914, -0.9771],
        [-0.4631, -0.9614]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:06,114][root][INFO] - Epoch 0, Step 4: train/loss = 0.7169437408447266, train/raw-loss = 0.7169437408447266, train/logprobs = tensor([[-0.4618, -0.8849],
        [-0.5966, -0.9626]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:07,784][root][INFO] - Epoch 0, Step 5: train/loss = 0.6856977939605713, train/raw-loss = 0.6856977939605713, train/logprobs = tensor([[-0.5412, -0.7631],
        [-0.6128, -0.7803]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:09,684][root][INFO] - Epoch 0, Step 6: train/loss = 0.6771498918533325, train/raw-loss = 0.6771498918533325, train/logprobs = tensor([[-0.6341, -0.9985],
        [-0.7945, -1.0321]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:11,391][root][INFO] - Epoch 0, Step 7: train/loss = 0.6522952318191528, train/raw-loss = 0.6522952318191528, train/logprobs = tensor([[-0.6011, -1.0845],
        [-0.7740, -1.0048]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:13,108][root][INFO] - Epoch 0, Step 8: train/loss = 0.6696561574935913, train/raw-loss = 0.6696561574935913, train/logprobs = tensor([[-0.5064, -0.7849],
        [-0.6102, -0.7677]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:15,087][root][INFO] - Epoch 0, Step 9: train/loss = 0.7117104530334473, train/raw-loss = 0.7117104530334473, train/logprobs = tensor([[-0.4390, -1.3903],
        [-0.5346, -1.3293]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:16,705][root][INFO] - Epoch 0, Step 10: train/loss = 0.6491269469261169, train/raw-loss = 0.6491269469261169, train/logprobs = tensor([[-0.6169, -1.0001],
        [-0.8811, -1.0051]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:18,556][root][INFO] - Epoch 0, Step 11: train/loss = 0.663357138633728, train/raw-loss = 0.663357138633728, train/logprobs = tensor([[-0.5850, -1.0174],
        [-0.7275, -0.9811]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:20,568][root][INFO] - Epoch 0, Step 12: train/loss = 0.6491296291351318, train/raw-loss = 0.6491296291351318, train/logprobs = tensor([[-0.4597, -0.8714],
        [-0.5616, -0.7146]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:22,346][root][INFO] - Epoch 0, Step 13: train/loss = 0.6994166374206543, train/raw-loss = 0.6994166374206543, train/logprobs = tensor([[-0.4028, -0.9860],
        [-0.5284, -1.0344]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:23,960][root][INFO] - Epoch 0, Step 14: train/loss = 0.6176139116287231, train/raw-loss = 0.6176139116287231, train/logprobs = tensor([[-0.7720, -1.0296],
        [-1.1123, -1.0003]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:25,758][root][INFO] - Epoch 0, Step 15: train/loss = 0.714752197265625, train/raw-loss = 0.714752197265625, train/logprobs = tensor([[-0.4261, -1.1127],
        [-0.5475, -1.0399]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:27,567][root][INFO] - Epoch 0, Step 16: train/loss = 0.6515693664550781, train/raw-loss = 0.6515693664550781, train/logprobs = tensor([[-0.6215, -1.0052],
        [-0.8106, -0.9256]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:29,485][root][INFO] - Epoch 0, Step 17: train/loss = 0.74064701795578, train/raw-loss = 0.74064701795578, train/logprobs = tensor([[-0.6765, -1.4742],
        [-0.7896, -1.4318]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:31,314][root][INFO] - Epoch 0, Step 18: train/loss = 0.683019757270813, train/raw-loss = 0.683019757270813, train/logprobs = tensor([[-0.4097, -0.6248],
        [-0.4455, -0.6038]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:33,058][root][INFO] - Epoch 0, Step 19: train/loss = 0.6721643805503845, train/raw-loss = 0.6721643805503845, train/logprobs = tensor([[-0.5945, -0.9959],
        [-0.7681, -1.0249]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:34,705][root][INFO] - Epoch 0, Step 20: train/loss = 0.6838469505310059, train/raw-loss = 0.6838469505310059, train/logprobs = tensor([[-0.7083, -1.0113],
        [-0.8607, -1.0630]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:36,488][root][INFO] - Epoch 0, Step 21: train/loss = 0.6506513357162476, train/raw-loss = 0.6506513357162476, train/logprobs = tensor([[-0.6203, -1.0062],
        [-0.7047, -0.8817]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:38,079][root][INFO] - Epoch 0, Step 22: train/loss = 0.6716729402542114, train/raw-loss = 0.6716729402542114, train/logprobs = tensor([[-0.5835, -0.7102],
        [-0.6939, -0.7224]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:39,843][root][INFO] - Epoch 0, Step 23: train/loss = 0.6846011877059937, train/raw-loss = 0.6846011877059937, train/logprobs = tensor([[-0.5911, -0.8946],
        [-0.7192, -0.9211]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:41,809][root][INFO] - Epoch 0, Step 24: train/loss = 0.6841790080070496, train/raw-loss = 0.6841790080070496, train/logprobs = tensor([[-0.5337, -0.9122],
        [-0.5857, -0.8229]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:43,697][root][INFO] - Epoch 0, Step 25: train/loss = 0.7405331134796143, train/raw-loss = 0.7405331134796143, train/logprobs = tensor([[-0.5144, -1.6764],
        [-0.6780, -1.7059]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:45,497][root][INFO] - Epoch 0, Step 26: train/loss = 0.683353841304779, train/raw-loss = 0.683353841304779, train/logprobs = tensor([[-0.5294, -1.0747],
        [-0.6366, -1.0324]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:47,222][root][INFO] - Epoch 0, Step 27: train/loss = 0.6943567395210266, train/raw-loss = 0.6943567395210266, train/logprobs = tensor([[-0.5237, -0.8285],
        [-0.5677, -0.8175]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:49,037][root][INFO] - Epoch 0, Step 28: train/loss = 0.6894216537475586, train/raw-loss = 0.6894216537475586, train/logprobs = tensor([[-0.5127, -0.7046],
        [-0.6105, -0.7590]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:50,686][root][INFO] - Epoch 0, Step 29: train/loss = 0.6912776231765747, train/raw-loss = 0.6912776231765747, train/logprobs = tensor([[-0.5908, -0.9549],
        [-0.7575, -1.0575]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:52,333][root][INFO] - Epoch 0, Step 30: train/loss = 0.6765687465667725, train/raw-loss = 0.6765687465667725, train/logprobs = tensor([[-0.5770, -0.7804],
        [-0.6570, -0.7668]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:30:54,458][root][INFO] - Epoch 0, Step 31: train/loss = 0.6775414943695068, train/raw-loss = 0.6775414943695068, train/logprobs = tensor([[-0.5623, -0.9098],
        [-0.6623, -0.9009]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:31:25,811] [INFO] [real_accelerator.py:191:get_accelerator] Setting ds_accelerator to cuda (auto detect)
Model saved, deleting model...
Deleted model...
[2024-08-01 16:31:54,031][root][INFO] - Epoch 0, Step 32: train/loss = 0.6800453662872314, train/raw-loss = 0.6800453662872314, train/logprobs = tensor([[-0.5918, -0.4775],
        [-0.6916, -0.5035]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:31:55,999][root][INFO] - Epoch 0, Step 33: train/loss = 0.7013219594955444, train/raw-loss = 0.7013219594955444, train/logprobs = tensor([[-0.4621, -1.0369],
        [-0.5430, -1.0384]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:31:57,713][root][INFO] - Epoch 0, Step 34: train/loss = 0.6269921660423279, train/raw-loss = 0.6269921660423279, train/logprobs = tensor([[-0.6465, -0.6588],
        [-0.8683, -0.5861]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:31:59,363][root][INFO] - Epoch 0, Step 35: train/loss = 0.6886226534843445, train/raw-loss = 0.6886226534843445, train/logprobs = tensor([[-0.5300, -0.4821],
        [-0.5589, -0.4916]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:01,359][root][INFO] - Epoch 0, Step 36: train/loss = 0.7493727207183838, train/raw-loss = 0.7493727207183838, train/logprobs = tensor([[-0.6081, -1.1795],
        [-0.8272, -1.1184]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:03,229][root][INFO] - Epoch 0, Step 37: train/loss = 0.7855808138847351, train/raw-loss = 0.7855808138847351, train/logprobs = tensor([[-0.2645, -0.9786],
        [-0.2865, -0.9937]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:05,199][root][INFO] - Epoch 0, Step 38: train/loss = 0.6710336208343506, train/raw-loss = 0.6710336208343506, train/logprobs = tensor([[-0.5282, -0.9590],
        [-0.6220, -0.9126]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:06,875][root][INFO] - Epoch 0, Step 39: train/loss = 0.667806088924408, train/raw-loss = 0.667806088924408, train/logprobs = tensor([[-0.4567, -0.6495],
        [-0.5293, -0.6053]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:08,695][root][INFO] - Epoch 0, Step 40: train/loss = 0.6638273596763611, train/raw-loss = 0.6638273596763611, train/logprobs = tensor([[-0.6288, -0.7511],
        [-0.7477, -0.7293]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:10,719][root][INFO] - Epoch 0, Step 41: train/loss = 0.6885464191436768, train/raw-loss = 0.6885464191436768, train/logprobs = tensor([[-0.5583, -1.1240],
        [-0.7238, -1.1752]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:12,721][root][INFO] - Epoch 0, Step 42: train/loss = 0.7015107870101929, train/raw-loss = 0.7015107870101929, train/logprobs = tensor([[-0.5200, -1.1407],
        [-0.6208, -1.1456]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:14,511][root][INFO] - Epoch 0, Step 43: train/loss = 0.7804447412490845, train/raw-loss = 0.7804447412490845, train/logprobs = tensor([[-0.9932, -1.7255],
        [-1.1653, -1.7362]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:16,317][root][INFO] - Epoch 0, Step 44: train/loss = 0.660341203212738, train/raw-loss = 0.660341203212738, train/logprobs = tensor([[-0.5554, -0.7472],
        [-0.6404, -0.6886]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:18,289][root][INFO] - Epoch 0, Step 45: train/loss = 0.6607081890106201, train/raw-loss = 0.6607081890106201, train/logprobs = tensor([[-0.6021, -1.0296],
        [-0.7988, -1.0142]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:20,507][root][INFO] - Epoch 0, Step 46: train/loss = 0.7030009627342224, train/raw-loss = 0.7030009627342224, train/logprobs = tensor([[-0.5867, -0.6050],
        [-0.7114, -0.6740]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:22,356][root][INFO] - Epoch 0, Step 47: train/loss = 0.7018436193466187, train/raw-loss = 0.7018436193466187, train/logprobs = tensor([[-0.3558, -0.7390],
        [-0.4162, -0.7394]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:24,071][root][INFO] - Epoch 0, Step 48: train/loss = 0.6569970846176147, train/raw-loss = 0.6569970846176147, train/logprobs = tensor([[-0.6245, -0.9780],
        [-0.7805, -0.9327]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:25,908][root][INFO] - Epoch 0, Step 49: train/loss = 0.7381888628005981, train/raw-loss = 0.7381888628005981, train/logprobs = tensor([[-0.3976, -1.0596],
        [-0.4392, -1.0192]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:27,751][root][INFO] - Epoch 0, Step 50: train/loss = 0.6695153713226318, train/raw-loss = 0.6695153713226318, train/logprobs = tensor([[-0.5940, -0.8196],
        [-0.7532, -0.8631]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:29,653][root][INFO] - Epoch 0, Step 51: train/loss = 0.7596107125282288, train/raw-loss = 0.7596107125282288, train/logprobs = tensor([[-0.4518, -1.4684],
        [-0.6286, -1.5407]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:31,422][root][INFO] - Epoch 0, Step 52: train/loss = 0.6702231168746948, train/raw-loss = 0.6702231168746948, train/logprobs = tensor([[-0.5824, -0.9940],
        [-0.6896, -0.9562]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:33,388][root][INFO] - Epoch 0, Step 53: train/loss = 0.7318512201309204, train/raw-loss = 0.7318512201309204, train/logprobs = tensor([[-0.5292, -1.1993],
        [-0.6978, -1.2462]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:35,087][root][INFO] - Epoch 0, Step 54: train/loss = 0.6800708770751953, train/raw-loss = 0.6800708770751953, train/logprobs = tensor([[-0.4219, -0.4438],
        [-0.4687, -0.4369]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:37,283][root][INFO] - Epoch 0, Step 55: train/loss = 0.6076589822769165, train/raw-loss = 0.6076589822769165, train/logprobs = tensor([[-0.6951, -1.0749],
        [-1.0660, -0.9849]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:39,219][root][INFO] - Epoch 0, Step 56: train/loss = 0.674102783203125, train/raw-loss = 0.674102783203125, train/logprobs = tensor([[-0.6187, -0.9069],
        [-0.7634, -0.9281]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:41,204][root][INFO] - Epoch 0, Step 57: train/loss = 0.6735553741455078, train/raw-loss = 0.6735553741455078, train/logprobs = tensor([[-0.4288, -0.4688],
        [-0.4770, -0.4360]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:43,039][root][INFO] - Epoch 0, Step 58: train/loss = 0.6822581887245178, train/raw-loss = 0.6822581887245178, train/logprobs = tensor([[-0.5008, -0.7811],
        [-0.5885, -0.7949]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:44,790][root][INFO] - Epoch 0, Step 59: train/loss = 0.7230233550071716, train/raw-loss = 0.7230233550071716, train/logprobs = tensor([[-0.4774, -1.2756],
        [-0.5342, -1.1962]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:46,615][root][INFO] - Epoch 0, Step 60: train/loss = 0.7119951248168945, train/raw-loss = 0.7119951248168945, train/logprobs = tensor([[-0.5197, -1.2570],
        [-0.5995, -1.2346]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:48,383][root][INFO] - Epoch 0, Step 61: train/loss = 0.7752705216407776, train/raw-loss = 0.7752705216407776, train/logprobs = tensor([[-0.6269, -2.3621],
        [-0.7657, -1.9764]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:50,360][root][INFO] - Epoch 0, Step 62: train/loss = 0.6952692270278931, train/raw-loss = 0.6952692270278931, train/logprobs = tensor([[-0.4520, -0.9244],
        [-0.5716, -0.9497]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
[2024-08-01 16:32:52,458][root][INFO] - Epoch 0, Step 63: train/loss = 0.7425470948219299, train/raw-loss = 0.7425470948219299, train/logprobs = tensor([[-0.4205, -1.0521],
        [-0.4920, -1.1354]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0
Model saved, deleting model...
Deleted model...
[2024-08-01 16:33:54,500][root][INFO] - Epoch 0, Step 64: train/loss = 0.6744559407234192, train/raw-loss = 0.6744559407234192, train/logprobs = tensor([[-0.8134, -0.8526],
        [-1.0211, -0.8705]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0016439298633486032
[2024-08-01 16:33:56,371][root][INFO] - Epoch 0, Step 65: train/loss = 0.6760789155960083, train/raw-loss = 0.6760789155960083, train/logprobs = tensor([[-0.6181, -0.6079],
        [-0.7217, -0.6387]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0017868041759356856
[2024-08-01 16:33:58,261][root][INFO] - Epoch 0, Step 66: train/loss = 0.6479360461235046, train/raw-loss = 0.6479360461235046, train/logprobs = tensor([[-0.5317, -0.7928],
        [-0.6947, -0.7358]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.001461125211790204
[2024-08-01 16:34:00,227][root][INFO] - Epoch 0, Step 67: train/loss = 0.644957423210144, train/raw-loss = 0.644957423210144, train/logprobs = tensor([[-0.6431, -1.1373],
        [-0.9067, -1.0374]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0015659065684303641
[2024-08-01 16:34:02,475][root][INFO] - Epoch 0, Step 68: train/loss = 0.6453765630722046, train/raw-loss = 0.6453765630722046, train/logprobs = tensor([[-0.5040, -0.7113],
        [-0.5991, -0.5872]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0013348598731681705
[2024-08-01 16:34:04,364][root][INFO] - Epoch 0, Step 69: train/loss = 0.6552166938781738, train/raw-loss = 0.6552166938781738, train/logprobs = tensor([[-0.4349, -1.1175],
        [-0.5321, -0.9576]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0014179294230416417
[2024-08-01 16:34:06,417][root][INFO] - Epoch 0, Step 70: train/loss = 0.6734757423400879, train/raw-loss = 0.6734757423400879, train/logprobs = tensor([[-0.5676, -0.5303],
        [-0.6261, -0.5022]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0014791133580729365
[2024-08-01 16:34:08,197][root][INFO] - Epoch 0, Step 71: train/loss = 0.6394845247268677, train/raw-loss = 0.6394845247268677, train/logprobs = tensor([[-0.5820, -1.0667],
        [-0.7747, -0.9917]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0016144374385476112
[2024-08-01 16:34:09,977][root][INFO] - Epoch 0, Step 72: train/loss = 0.6295205354690552, train/raw-loss = 0.6295205354690552, train/logprobs = tensor([[-0.5460, -1.1624],
        [-0.7638, -1.0284]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0015991742257028818
[2024-08-01 16:34:11,688][root][INFO] - Epoch 0, Step 73: train/loss = 0.6713540554046631, train/raw-loss = 0.6713540554046631, train/logprobs = tensor([[-0.5927, -1.4881],
        [-0.7393, -1.3654]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0018814975628629327
[2024-08-01 16:34:13,535][root][INFO] - Epoch 0, Step 74: train/loss = 0.6436905264854431, train/raw-loss = 0.6436905264854431, train/logprobs = tensor([[-0.4895, -1.2626],
        [-0.6260, -1.0418]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0015298065263777971
[2024-08-01 16:34:15,302][root][INFO] - Epoch 0, Step 75: train/loss = 0.6878677010536194, train/raw-loss = 0.6878677010536194, train/logprobs = tensor([[-0.5515, -0.9396],
        [-0.6316, -0.9633]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0017268729861825705
[2024-08-01 16:34:17,273][root][INFO] - Epoch 0, Step 76: train/loss = 0.6662075519561768, train/raw-loss = 0.6662075519561768, train/logprobs = tensor([[-0.5103, -0.9339],
        [-0.5674, -0.8269]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0016056094318628311
[2024-08-01 16:34:19,192][root][INFO] - Epoch 0, Step 77: train/loss = 0.6862782835960388, train/raw-loss = 0.6862782835960388, train/logprobs = tensor([[-0.4039, -0.8498],
        [-0.4843, -0.8116]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0013614501804113388
[2024-08-01 16:34:20,832][root][INFO] - Epoch 0, Step 78: train/loss = 0.7345765829086304, train/raw-loss = 0.7345765829086304, train/logprobs = tensor([[-0.6846, -1.6592],
        [-0.9388, -1.7039]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0017604718450456858
[2024-08-01 16:34:22,820][root][INFO] - Epoch 0, Step 79: train/loss = 0.6516909599304199, train/raw-loss = 0.6516909599304199, train/logprobs = tensor([[-0.5977, -0.9026],
        [-0.6832, -0.8025]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0019365772604942322
[2024-08-01 16:34:24,508][root][INFO] - Epoch 0, Step 80: train/loss = 0.6541316509246826, train/raw-loss = 0.6541316509246826, train/logprobs = tensor([[-0.5550, -0.7297],
        [-0.6763, -0.6829]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.001569302985444665
[2024-08-01 16:34:26,476][root][INFO] - Epoch 0, Step 81: train/loss = 0.6712537407875061, train/raw-loss = 0.6712537407875061, train/logprobs = tensor([[-0.5696, -0.7867],
        [-0.6720, -0.7678]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0014988873153924942
[2024-08-01 16:34:28,319][root][INFO] - Epoch 0, Step 82: train/loss = 0.6609941124916077, train/raw-loss = 0.6609941124916077, train/logprobs = tensor([[-0.4584, -0.7647],
        [-0.5627, -0.7106]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0017291773110628128
[2024-08-01 16:34:30,335][root][INFO] - Epoch 0, Step 83: train/loss = 0.6490045785903931, train/raw-loss = 0.6490045785903931, train/logprobs = tensor([[-0.4592, -1.1309],
        [-0.5470, -0.9393]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0013499523047357798
[2024-08-01 16:34:32,352][root][INFO] - Epoch 0, Step 84: train/loss = 0.7339288592338562, train/raw-loss = 0.7339288592338562, train/logprobs = tensor([[-0.4740, -1.7608],
        [-0.5428, -1.4690]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0014954294310882688
[2024-08-01 16:34:34,239][root][INFO] - Epoch 0, Step 85: train/loss = 0.6971246004104614, train/raw-loss = 0.6971246004104614, train/logprobs = tensor([[-0.4416, -0.8541],
        [-0.4911, -0.8216]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0014377149054780602
[2024-08-01 16:34:36,242][root][INFO] - Epoch 0, Step 86: train/loss = 0.6714349985122681, train/raw-loss = 0.6714349985122681, train/logprobs = tensor([[-0.4514, -1.1974],
        [-0.5362, -1.0466]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.001342009287327528
[2024-08-01 16:34:38,064][root][INFO] - Epoch 0, Step 87: train/loss = 0.6579980254173279, train/raw-loss = 0.6579980254173279, train/logprobs = tensor([[-0.4803, -1.4758],
        [-0.6692, -1.3275]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0016399770975112915
[2024-08-01 16:34:39,842][root][INFO] - Epoch 0, Step 88: train/loss = 0.750980019569397, train/raw-loss = 0.750980019569397, train/logprobs = tensor([[-0.4879, -1.5127],
        [-0.5933, -1.4714]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.001451788004487753
[2024-08-01 16:34:41,701][root][INFO] - Epoch 0, Step 89: train/loss = 0.642716109752655, train/raw-loss = 0.642716109752655, train/logprobs = tensor([[-0.5736, -1.0158],
        [-0.7497, -0.9389]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0015358575619757175
[2024-08-01 16:34:43,329][root][INFO] - Epoch 0, Step 90: train/loss = 0.666482150554657, train/raw-loss = 0.666482150554657, train/logprobs = tensor([[-0.5804, -0.7520],
        [-0.6862, -0.7391]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0015352016780525446
[2024-08-01 16:34:45,142][root][INFO] - Epoch 0, Step 91: train/loss = 0.705828845500946, train/raw-loss = 0.705828845500946, train/logprobs = tensor([[-0.4692, -1.1181],
        [-0.5635, -0.9726]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0013685084413737059
[2024-08-01 16:34:46,962][root][INFO] - Epoch 0, Step 92: train/loss = 0.6542193293571472, train/raw-loss = 0.6542193293571472, train/logprobs = tensor([[-0.5667, -0.8866],
        [-0.6337, -0.7284]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0015778574161231518
[2024-08-01 16:34:48,922][root][INFO] - Epoch 0, Step 93: train/loss = 0.6902498602867126, train/raw-loss = 0.6902498602867126, train/logprobs = tensor([[-0.4128, -0.8810],
        [-0.4738, -0.8365]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0015146085061132908
[2024-08-01 16:34:50,806][root][INFO] - Epoch 0, Step 94: train/loss = 0.6869288086891174, train/raw-loss = 0.6869288086891174, train/logprobs = tensor([[-0.4781, -0.4448],
        [-0.5119, -0.4499]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0016173741314560175
[2024-08-01 16:34:52,583][root][INFO] - Epoch 0, Step 95: train/loss = 0.6794025897979736, train/raw-loss = 0.6794025897979736, train/logprobs = tensor([[-0.5733, -0.8805],
        [-0.7095, -0.9008]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0016829869709908962
Model saved, deleting model...
Deleted model...
[2024-08-01 16:35:53,675][root][INFO] - Epoch 0, Step 96: train/loss = 0.6765381693840027, train/raw-loss = 0.6765381693840027, train/logprobs = tensor([[-0.8616, -0.5959],
        [-0.9336, -0.4932]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.005388704594224691
[2024-08-01 16:35:55,498][root][INFO] - Epoch 0, Step 97: train/loss = 0.6808932423591614, train/raw-loss = 0.6808932423591614, train/logprobs = tensor([[-0.4604, -1.0467],
        [-0.4931, -0.8843]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.00460590748116374
[2024-08-01 16:35:57,514][root][INFO] - Epoch 0, Step 98: train/loss = 0.687434196472168, train/raw-loss = 0.687434196472168, train/logprobs = tensor([[-0.5177, -1.7233],
        [-0.5739, -1.2915]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.005185259040445089
[2024-08-01 16:35:59,312][root][INFO] - Epoch 0, Step 99: train/loss = 0.6671328544616699, train/raw-loss = 0.6671328544616699, train/logprobs = tensor([[-0.5282, -1.3856],
        [-0.6782, -1.2505]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.005504164844751358
[2024-08-01 16:36:01,116][root][INFO] - Epoch 0, Step 100: train/loss = 0.6067368388175964, train/raw-loss = 0.6067368388175964, train/logprobs = tensor([[-0.7188, -1.0855],
        [-0.9484, -0.9315]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.005131085868924856
[2024-08-01 16:36:02,731][root][INFO] - Epoch 0, Step 101: train/loss = 0.6677814722061157, train/raw-loss = 0.6677814722061157, train/logprobs = tensor([[-0.6093, -1.1788],
        [-0.7043, -1.0445]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.006073065102100372
[2024-08-01 16:36:04,448][root][INFO] - Epoch 0, Step 102: train/loss = 0.6416810154914856, train/raw-loss = 0.6416810154914856, train/logprobs = tensor([[-0.7157, -0.9354],
        [-0.8120, -0.7653]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.00540295522660017
[2024-08-01 16:36:06,215][root][INFO] - Epoch 0, Step 103: train/loss = 0.6224719285964966, train/raw-loss = 0.6224719285964966, train/logprobs = tensor([[-0.6708, -1.1260],
        [-0.8014, -0.8966]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.00507219647988677
[2024-08-01 16:36:08,004][root][INFO] - Epoch 0, Step 104: train/loss = 0.6807407140731812, train/raw-loss = 0.6807407140731812, train/logprobs = tensor([[-0.5396, -0.8756],
        [-0.6158, -0.8551]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.005049996078014374
[2024-08-01 16:36:09,937][root][INFO] - Epoch 0, Step 105: train/loss = 0.6496890783309937, train/raw-loss = 0.6496890783309937, train/logprobs = tensor([[-0.5434, -0.8667],
        [-0.6039, -0.7092]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.004731729160994291
[2024-08-01 16:36:11,784][root][INFO] - Epoch 0, Step 106: train/loss = 0.6737678050994873, train/raw-loss = 0.6737678050994873, train/logprobs = tensor([[-0.6250, -0.9877],
        [-0.7251, -0.9133]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.005869362503290176
[2024-08-01 16:36:13,643][root][INFO] - Epoch 0, Step 107: train/loss = 0.6679694652557373, train/raw-loss = 0.6679694652557373, train/logprobs = tensor([[-0.5092, -1.9803],
        [-0.5812, -1.3630]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.004482888616621494
[2024-08-01 16:36:16,139][root][INFO] - Epoch 0, Step 108: train/loss = 0.6841253042221069, train/raw-loss = 0.6841253042221069, train/logprobs = tensor([[-0.5610, -1.3840],
        [-0.7401, -1.2356]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.005147565621882677
[2024-08-01 16:36:17,897][root][INFO] - Epoch 0, Step 109: train/loss = 0.6180543899536133, train/raw-loss = 0.6180543899536133, train/logprobs = tensor([[-0.7222, -1.4708],
        [-0.8426, -1.1868]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.006006918847560883
[2024-08-01 16:36:19,893][root][INFO] - Epoch 0, Step 110: train/loss = 0.6434829235076904, train/raw-loss = 0.6434829235076904, train/logprobs = tensor([[-0.7464, -0.6670],
        [-0.9023, -0.5613]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.005043322220444679
[2024-08-01 16:36:22,226][root][INFO] - Epoch 0, Step 111: train/loss = 0.6585421562194824, train/raw-loss = 0.6585421562194824, train/logprobs = tensor([[-0.5335, -1.1275],
        [-0.6029, -0.9597]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0048799943178892136
[2024-08-01 16:36:24,302][root][INFO] - Epoch 0, Step 112: train/loss = 0.6588923931121826, train/raw-loss = 0.6588923931121826, train/logprobs = tensor([[-0.5680, -0.7438],
        [-0.6361, -0.6543]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.004449636675417423
[2024-08-01 16:36:26,331][root][INFO] - Epoch 0, Step 113: train/loss = 0.68525230884552, train/raw-loss = 0.68525230884552, train/logprobs = tensor([[-0.3862, -0.5056],
        [-0.4071, -0.4873]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.004344253800809383
[2024-08-01 16:36:28,372][root][INFO] - Epoch 0, Step 114: train/loss = 0.6538015604019165, train/raw-loss = 0.6538015604019165, train/logprobs = tensor([[-0.4897, -1.2820],
        [-0.5426, -0.9873]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.005000371485948563
[2024-08-01 16:36:30,091][root][INFO] - Epoch 0, Step 115: train/loss = 0.6763836741447449, train/raw-loss = 0.6763836741447449, train/logprobs = tensor([[-0.5880, -0.7204],
        [-0.6972, -0.7379]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.005661711562424898
[2024-08-01 16:36:31,985][root][INFO] - Epoch 0, Step 116: train/loss = 0.6589759588241577, train/raw-loss = 0.6589759588241577, train/logprobs = tensor([[-0.4718, -1.7930],
        [-0.5930, -1.3955]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.004328457172960043
[2024-08-01 16:36:34,050][root][INFO] - Epoch 0, Step 117: train/loss = 0.5717936754226685, train/raw-loss = 0.5717936754226685, train/logprobs = tensor([[-0.6650, -1.6340],
        [-1.0538, -1.2019]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.005350631661713123
[2024-08-01 16:36:36,180][root][INFO] - Epoch 0, Step 118: train/loss = 0.6590900421142578, train/raw-loss = 0.6590900421142578, train/logprobs = tensor([[-0.4251, -0.7242],
        [-0.4707, -0.6028]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.003959318622946739
[2024-08-01 16:36:38,160][root][INFO] - Epoch 0, Step 119: train/loss = 0.7021430730819702, train/raw-loss = 0.7021430730819702, train/logprobs = tensor([[-0.4547, -0.8615],
        [-0.5139, -0.8617]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0037999222986400127
[2024-08-01 16:36:40,147][root][INFO] - Epoch 0, Step 120: train/loss = 0.6878498196601868, train/raw-loss = 0.6878498196601868, train/logprobs = tensor([[-0.3957, -0.4358],
        [-0.4289, -0.4423]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.004018288105726242
[2024-08-01 16:36:42,023][root][INFO] - Epoch 0, Step 121: train/loss = 0.6677067279815674, train/raw-loss = 0.6677067279815674, train/logprobs = tensor([[-0.7556, -0.9773],
        [-1.0031, -1.0634]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.005607004277408123
[2024-08-01 16:36:44,057][root][INFO] - Epoch 0, Step 122: train/loss = 0.6837310791015625, train/raw-loss = 0.6837310791015625, train/logprobs = tensor([[-0.5589, -1.3529],
        [-0.5989, -1.0973]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.004011246375739574
[2024-08-01 16:36:46,229][root][INFO] - Epoch 0, Step 123: train/loss = 0.6353597044944763, train/raw-loss = 0.6353597044944763, train/logprobs = tensor([[-0.6348, -1.1487],
        [-0.7627, -0.9698]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0059786466881632805
[2024-08-01 16:36:48,027][root][INFO] - Epoch 0, Step 124: train/loss = 0.6723432540893555, train/raw-loss = 0.6723432540893555, train/logprobs = tensor([[-0.6039, -0.5862],
        [-0.7247, -0.6076]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.005054587498307228
[2024-08-01 16:36:49,789][root][INFO] - Epoch 0, Step 125: train/loss = 0.6649034023284912, train/raw-loss = 0.6649034023284912, train/logprobs = tensor([[-0.5275, -0.6188],
        [-0.5891, -0.5636]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0055704363621771336
[2024-08-01 16:36:51,427][root][INFO] - Epoch 0, Step 126: train/loss = 0.6820977926254272, train/raw-loss = 0.6820977926254272, train/logprobs = tensor([[-0.6186, -1.1186],
        [-0.7963, -1.1290]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.005688387900590897
[2024-08-01 16:36:53,491][root][INFO] - Epoch 0, Step 127: train/loss = 0.6590330600738525, train/raw-loss = 0.6590330600738525, train/logprobs = tensor([[-0.6815, -2.1075],
        [-0.8347, -1.5783]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.005433047655969858
Model saved, deleting model...
Deleted model...
[2024-08-01 16:37:54,380][root][INFO] - Epoch 0, Step 128: train/loss = 0.6408599615097046, train/raw-loss = 0.6408599615097046, train/logprobs = tensor([[-0.6467, -0.8301],
        [-0.7246, -0.6823]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.020068645477294922
[2024-08-01 16:37:56,132][root][INFO] - Epoch 0, Step 129: train/loss = 0.6422597169876099, train/raw-loss = 0.6422597169876099, train/logprobs = tensor([[-0.6260, -1.0012],
        [-0.7109, -0.8053]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.020582089200615883
[2024-08-01 16:37:58,087][root][INFO] - Epoch 0, Step 130: train/loss = 0.6431516408920288, train/raw-loss = 0.6431516408920288, train/logprobs = tensor([[-0.4445, -0.8835],
        [-0.4652, -0.5960]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.015717167407274246
[2024-08-01 16:38:00,193][root][INFO] - Epoch 0, Step 131: train/loss = 0.6586435437202454, train/raw-loss = 0.6586435437202454, train/logprobs = tensor([[-0.4275, -0.5254],
        [-0.4869, -0.4251]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.0163422841578722
[2024-08-01 16:38:01,895][root][INFO] - Epoch 0, Step 132: train/loss = 0.6383571028709412, train/raw-loss = 0.6383571028709412, train/logprobs = tensor([[-0.6704, -1.0662],
        [-0.6939, -0.7887]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.019985992461442947
[2024-08-01 16:38:03,814][root][INFO] - Epoch 0, Step 133: train/loss = 0.6493493318557739, train/raw-loss = 0.6493493318557739, train/logprobs = tensor([[-0.4895, -0.7625],
        [-0.5152, -0.5950]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.017122210934758186
[2024-08-01 16:38:05,760][root][INFO] - Epoch 0, Step 134: train/loss = 0.6256093978881836, train/raw-loss = 0.6256093978881836, train/logprobs = tensor([[-0.4560, -0.9879],
        [-0.4886, -0.6433]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.02059994265437126
[2024-08-01 16:38:07,600][root][INFO] - Epoch 0, Step 135: train/loss = 0.6523186564445496, train/raw-loss = 0.6523186564445496, train/logprobs = tensor([[-0.4368, -0.8458],
        [-0.4514, -0.6505]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.01634833961725235
[2024-08-01 16:38:09,258][root][INFO] - Epoch 0, Step 136: train/loss = 0.6263824701309204, train/raw-loss = 0.6263824701309204, train/logprobs = tensor([[-0.5884, -1.0983],
        [-0.6294, -0.7966]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.021394269540905952
[2024-08-01 16:38:11,183][root][INFO] - Epoch 0, Step 137: train/loss = 0.6577780246734619, train/raw-loss = 0.6577780246734619, train/logprobs = tensor([[-0.4624, -0.8055],
        [-0.4860, -0.6444]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.02241591177880764
[2024-08-01 16:38:13,219][root][INFO] - Epoch 0, Step 138: train/loss = 0.6769986748695374, train/raw-loss = 0.6769986748695374, train/logprobs = tensor([[-0.5428, -0.5121],
        [-0.5715, -0.4628]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.017493795603513718
[2024-08-01 16:38:15,227][root][INFO] - Epoch 0, Step 139: train/loss = 0.6022990345954895, train/raw-loss = 0.6022990345954895, train/logprobs = tensor([[-0.5148, -1.4908],
        [-0.5793, -0.9508]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.017061889171600342
[2024-08-01 16:38:17,047][root][INFO] - Epoch 0, Step 140: train/loss = 0.6311019659042358, train/raw-loss = 0.6311019659042358, train/logprobs = tensor([[-0.4950, -1.1569],
        [-0.4896, -0.7989]], device='cuda:0', grad_fn=<DivBackward0>), KL = 0.017642809078097343
