INFO 03-11 00:58:03 llm_engine.py:79] Initializing an LLM engine with config: model='mistralai/Mistral-7B-v0.1', tokenizer='mistralai/Mistral-7B-v0.1', tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32768, download_dir='/scr/jphilipp/typo/pretrained_models/Mistral-7B-v0.1', load_format=auto, tensor_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, seed=0)
INFO 03-11 00:58:06 weight_utils.py:163] Using model weights format ['*.safetensors']
INFO 03-11 00:58:10 llm_engine.py:337] # GPU blocks: 27374, # CPU blocks: 2048
INFO 03-11 00:58:11 model_runner.py:666] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 03-11 00:58:11 model_runner.py:670] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 03-11 00:58:15 model_runner.py:738] Graph capturing finished in 4 secs.
0.0
0.3
1.0
Starting Iteration: 0 for Beta: 0.1, LR: 1e-6
0 10000
INFO 03-11 01:08:13 config.py:407] Custom all-reduce kernels are temporarily disabled due to stability issues. We will re-enable them once the issues are resolved.
INFO 03-11 01:08:17 llm_engine.py:79] Initializing an LLM engine with config: model='mistralai/Mistral-7B-v0.1', tokenizer='mistralai/Mistral-7B-v0.1', tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32768, download_dir='/scr/jphilipp/typo/pretrained_models/Mistral-7B-v0.1', load_format=auto, tensor_parallel_size=4, disable_custom_all_reduce=True, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, seed=0)
INFO 03-11 01:08:29 weight_utils.py:163] Using model weights format ['*.safetensors']
[36m(RayWorkerVllm pid=1963264)[0m INFO 03-11 01:08:30 weight_utils.py:163] Using model weights format ['*.safetensors']
INFO 03-11 01:08:34 llm_engine.py:337] # GPU blocks: 129303, # CPU blocks: 8192
INFO 03-11 01:08:35 model_runner.py:666] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 03-11 01:08:35 model_runner.py:670] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerVllm pid=1963264)[0m INFO 03-11 01:08:35 model_runner.py:666] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerVllm pid=1963264)[0m INFO 03-11 01:08:35 model_runner.py:670] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerVllm pid=1963585)[0m INFO 03-11 01:08:30 weight_utils.py:163] Using model weights format ['*.safetensors'][32m [repeated 2x across cluster] (Ray deduplicates logs by default. Set RAY_DEDUP_LOGS=0 to disable log deduplication, or see https://docs.ray.io/en/master/ray-observability/ray-logging.html#log-deduplication for more options.)[0m
INFO 03-11 01:08:40 model_runner.py:738] Graph capturing finished in 5 secs.
[36m(RayWorkerVllm pid=1963264)[0m INFO 03-11 01:08:40 model_runner.py:738] Graph capturing finished in 5 secs.
