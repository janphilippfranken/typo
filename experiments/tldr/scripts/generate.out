{'model': 'meta-llama/Meta-Llama-3-70B', 'download_dir': '/scr/jphilipp/sami-online/pretrained_models/Meta-Llama-3-70B', 'dtype': 'auto', 'quantization': None, 'tensor_parallel_size': 2}
0 10000
True True True
INFO 05-16 14:02:25 config.py:407] Custom all-reduce kernels are temporarily disabled due to stability issues. We will re-enable them once the issues are resolved.
INFO 05-16 14:02:30 llm_engine.py:79] Initializing an LLM engine with config: model='meta-llama/Meta-Llama-3-70B', tokenizer='meta-llama/Meta-Llama-3-70B', tokenizer_mode=auto, revision=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir='/scr/jphilipp/sami-online/pretrained_models/Meta-Llama-3-70B', load_format=auto, tensor_parallel_size=2, disable_custom_all_reduce=True, quantization=None, enforce_eager=False, kv_cache_dtype=auto, device_config=cuda, seed=0)
INFO 05-16 14:02:39 weight_utils.py:163] Using model weights format ['*.safetensors']
[36m(RayWorkerVllm pid=1937753)[0m INFO 05-16 14:02:39 weight_utils.py:163] Using model weights format ['*.safetensors']
INFO 05-16 14:03:07 llm_engine.py:337] # GPU blocks: 675, # CPU blocks: 1638
INFO 05-16 14:03:09 model_runner.py:666] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 05-16 14:03:09 model_runner.py:670] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
[36m(RayWorkerVllm pid=1937753)[0m INFO 05-16 14:03:09 model_runner.py:666] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
[36m(RayWorkerVllm pid=1937753)[0m INFO 05-16 14:03:09 model_runner.py:670] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 05-16 14:03:19 model_runner.py:738] Graph capturing finished in 9 secs.
[36m(RayWorkerVllm pid=1937753)[0m INFO 05-16 14:03:19 model_runner.py:738] Graph capturing finished in 9 secs.
